#!/usr/bin/env python

import os
from bsdconv import *
from gi.repository import Gtk

class gBsdConv(object):       
	def __init__(self):
		self.builder = builder = Gtk.Builder()
		builder.add_from_file("gbsdconv.xml")
		self.window = builder.get_object("main_window")
		self.window.connect("delete-event", Gtk.main_quit)
		self.localefilter = Bsdconv('locale,3f:locale,3f')
		builder.get_object("conversion").set_text("BYTE:BYTE")

		#Global objects
		self.converter = Bsdconv("BYTE:BYTE")
		self.items = Gtk.TreeStore(int, str, bool)
		self.inter_codecs = {}

		main_tabs = builder.get_object("main_tabs")
		main_tabs.connect("switch-page", self.main_tabs_cb)

		operation_tabs = builder.get_object("operation_tabs")
		operation_tabs.connect("switch-page", self.operation_tabs_cb)

		#Items tab
		items = builder.get_object("items")
		items.insert_column_with_data_func(0, "#", Gtk.CellRendererToggle(), self.items_toggle_render_cb, 0)
		items_path=Gtk.TreeViewColumn("Path", Gtk.CellRendererText(), text=1)
		items.append_column(items_path)
		items.set_expander_column(items_path)
		items.set_model(self.items)

		item_add = builder.get_object("item_add")
		item_add.connect("clicked", self.item_add_cb)

		item_add_r = builder.get_object("item_add_r")
		item_add_r.connect("clicked", self.item_add_cb)

		item_remove = builder.get_object("item_remove")
		item_remove.connect("clicked", self.item_remove_cb)

		#Conversion tab
		self.from_codecs = Gtk.ListStore(str)
		self.inter_codecs = Gtk.ListStore(str)
		self.to_codecs = Gtk.ListStore(str)

		codecs=codecs_list(FROM)
		for codec in codecs:
			self.from_codecs.append([codec])
		codecs=codecs_list(INTER)
		for codec in codecs:
			self.inter_codecs.append([codec])
		codecs=codecs_list(TO)
		for codec in codecs:
			self.to_codecs.append([codec])

		text_convert = builder.get_object("conversion_generate")
		text_convert.connect("clicked", self.generate_cb)

		builder.get_object("conversion").connect("changed", self.conversion_apply_cb)

		builder.get_object("conversion_add").connect('clicked', self.conversion_add_cb)
		builder.get_object("conversion_add").clicked()

		#Operation tab
		#+Text tab
		text_origin_buffer = builder.get_object("text_origin").get_buffer()
		text_origin_buffer.connect("changed", self.text_cb)

		#+Naming tab
		naming_origin = builder.get_object("naming_origin")
		naming_origin.insert_column_with_data_func(0, "#", Gtk.CellRendererToggle(), self.items_toggle_render_cb, 0)
		renderer = Gtk.CellRendererText()
		items_path = Gtk.TreeViewColumn("Path", renderer, text=1)
		naming_origin.append_column(items_path)
		naming_origin.set_expander_column(items_path)
		naming_origin.set_model(self.items)

		naming_result = builder.get_object("naming_result")
		items_path = Gtk.TreeViewColumn("Path", renderer, text=1)
		naming_result.append_column(items_path)
		naming_result.set_expander_column(items_path)

		#+Content tab
		content_items = builder.get_object("content_items")
		content_items.insert_column_with_data_func(0, "#", Gtk.CellRendererToggle(), self.items_toggle_render_cb, 0)
		renderer = Gtk.CellRendererText()
		items_path = Gtk.TreeViewColumn("Path", renderer, text=1)
		content_items.append_column(items_path)
		content_items.set_expander_column(items_path)
		content_items.set_model(self.items)

		content_items_select = content_items.get_selection()
		content_items_select.connect("changed", self.content_items_select_cb)

		#launch
		self.window.show()

	#Callbacks
	def main_tabs_cb(self, notebook, page, pagen):
		operation_tabs = self.builder.get_object("operation_tabs")
		operation_curr_page = operation_tabs.get_nth_page(operation_tabs.get_current_page())
		if page == operation_tabs and operation_curr_page == self.builder.get_object("operation_naming_page"):
			self.naming_cb()

	#Callbacks for items tab
	def item_add_cb(self, obj):
		builder = self.builder
		recur = obj==builder.get_object("item_add_r")
		for path in builder.get_object("item_chooser").get_filenames():
			self.item_add_cb_r(path, recur)

		builder.get_object("items").expand_all()
		builder.get_object("content_items").expand_all()

	def item_add_cb_r(self, path, recur):
		self.item_add_cb_sub(path)
		if recur and os.path.isdir(path):
			for spath in os.listdir(path):
				self.item_add_cb_r(os.path.join(path, spath), recur)

	def item_add_cb_sub(self, path):
		a=[path]
		while len(a[0])>1:
			t=a.pop(0)
			p, q = os.path.split(t)
			a.insert(0, q)
			a.insert(0, p)
		parent = None
		for i in xrange(0, len(a)):
			p=a[i]
			curr = self.items.iter_children(parent)
			while curr != None:
				if p==self.items[curr][1]:
					parent = curr
					break
				curr = self.items.iter_next(curr)
			if curr == None:
				if i==len(a)-1:
					parent = self.items.append(parent, [1, p, True])
				else:
					parent = self.items.append(parent, [-1, p, False])

	def item_remove_cb(self, obj):
		model, treeiter = self.builder.get_object("items").get_selection().get_selected()
		if treeiter:
			model.remove(treeiter)

	#Callbacks for conversion tab
	def generate_cb(self, obj):
		conversion=[]
		builder = self.builder

		conversion.append(builder.get_object("from_codecs").get_active_text())

		ignoring_whitespaces=builder.get_object("chk_ignoring_whitespace")

		if ignoring_whitespaces.get_active():
			conversion.append('WHITESPACE-DERAIL')

		if ignoring_whitespaces.get_active():
			conversion.append('WHITESPACE-RERAIL')

		conversion.append(builder.get_object("to_codecs").get_active_text())

		print builder.get_object("to_codecs")
		print conversion
		builder.get_object("conversion").set_text(':'.join(conversion))

	def conversion_apply_cb(self, obj):
		self.converter = Bsdconv(self.builder.get_object("conversion").get_text())
		if self.converter:
			self.builder.get_object('status').push(0, str(self.converter))
		else:
			self.builder.get_object('status').push(0, error())

	def codecs_list_cb(self, obj):
		print obj.get_label()

	def conversion_add_cb(self, obj):
		conversion = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
		conversion.set_visible(True)
		self.builder.get_object('conversions').pack_start(conversion, False, False, 0)
		for codecs in (self.from_codecs, self.inter_codecs, self.to_codecs):
			obj_codecs=Gtk.ComboBox.new_with_model(codecs)
			obj_codecs.set_visible(True)
			conversion.pack_start(obj_codecs, False, False, 0)
			renderer=Gtk.CellRendererText()
			obj_codecs.pack_start(renderer, False)
			obj_codecs.add_attribute(renderer, "text", 0)
			obj_codecs.set_active(0)

	#Callbacks for operation tab
	#+Text
	def text_cb(self, obj):
		builder = self.builder
		if not self.converter:
			return
		i=builder.get_object("text_origin").get_buffer()
		o=builder.get_object("text_result").get_buffer()
		cnt = i.get_text(i.get_start_iter(), i.get_end_iter(), 0)
		o.set_text(cnt)
		o.set_text(self.converter.conv(cnt))

	#+Naming
	def operation_tabs_cb(self, notebook, page, pagen):
		if page == self.builder.get_object("operation_naming_page"):
			self.naming_cb()

	def naming_cb(self):
		if not self.converter:
			return
		naming_result = self.builder.get_object("naming_result")
		naming_result_store = Gtk.TreeStore(int, str)
		naming_result.set_model(naming_result_store)

		self.naming_cb_r(naming_result_store, None, None)

		naming_result.expand_all()
		self.builder.get_object("naming_origin").expand_all()

	def naming_cb_r(self, store, fparent, tparent):
		fcurr = self.items.iter_children(fparent)
		while fcurr != None:
			if self.items[fcurr][0] and self.items[fcurr][2]:
				tcurr = store.append(tparent, [1, self.converter.conv(self.items[fcurr][1])])
			else:
				tcurr = store.append(tparent, [-1, self.items[fcurr][1]])
			if self.items.iter_has_child(fcurr):
				self.naming_cb_r(store, fcurr, tcurr)
			fcurr = self.items.iter_next(fcurr)

	#+Content
	def content_items_select_cb(self, obj):
		builder = self.builder
		model, treeiter = obj.get_selected()
		if treeiter != None:
			filename = self.getFullPath(model, treeiter)
			if os.path.isfile(filename):
				f=open(filename,'r')
				cnt=f.read()
				builder.get_object("content_origin").get_buffer().set_text(self.localefilter.conv(cnt))
				f.close()
				if not self.converter:
					return
				builder.get_object("content_result").get_buffer().set_text(self.localefilter.conv(self.converter.conv(cnt)))

	#helper
	def items_toggle_render_cb(self, column, cell, model, iter, arg):
		if self.items[iter][0]==-1:
			cell.set_visible(False)
		else:
			cell.set_visible(True)
			if self.items[iter][0]==0:
				cell.set_active(False)
			else:
				cell.set_active(True)
			cell.connect("toggled", self.items_toggle_cb)

	def items_toggle_cb(self, renderer, path):
		iter=self.items.get_iter(path)
		if self.items[iter][0]:
			self.items[iter][0]=0
		else:
			self.items[iter][0]=1

	def getFullPath(self, model, ti):
		ret=[]
		while ti!=None:
			ret.insert(0, model[ti][1])
			ti = model.iter_parent(ti)
		return os.path.join(*ret)


if __name__ == "__main__":
	app = gBsdConv()
	Gtk.main()
